version: 0.1
environment_variables:
  plaintext:
    CHILD_TEMPLATES: |
      cloudformation/stackset/microservice-templates/ecs-cluster.yaml
      cloudformation/stackset/microservice-templates/load-balancer-listener-rule.yaml
      cloudformation/stackset/microservice-templates/service.yaml
    TEMPLATE_FILES: |
      cloudformation/stackset/microservice.yaml
      cloudformation/stackset/microservice-templates/ecs-cluster.yaml
      cloudformation/stackset/microservice-templates/load-balancer-listener-rule.yaml
      cloudformation/stackset/microservice-templates/service.yaml
phases:
  install:
    commands:
    - apt update && apt install -y jq
    - npm install jsonlint -g
  pre_build:
    commands:
    - echo "Validating CFN templates"
    - |
      for cfn_template in $TEMPLATE_FILES; do
        echo "Validating CloudFormation template file $cfn_template"
        aws cloudformation validate-template --template-body file://$cfn_template
      done
  build:
    commands:
    - echo "Copying child stack templates to S3 bucket"
    - |
      for child_template in $CHILD_TEMPLATES; do
        aws s3 cp "$child_template" "s3://$TEMPLATE_BUCKET/codebuild/$child_template"
      done
    - |
      CONTEXT_PATH_ESCAPED=$(echo $CONTEXT_PATH | sed 's/\//\\\//g')
      CUSTOM_RAND_VAR=$(shuf -i 1-50000 -n 1)

      sed -i -e "s/CONTEXT_PATH_PLACEHOLDER/$CONTEXT_PATH_ESCAPED/" cloudformation/stackset/microservice-params-template.json
      sed -i -e "s/LOAD_BALANCER_LISTENER_RULE_PRIORITY_PLACEHOLDER/$CUSTOM_RAND_VAR/" cloudformation/stackset/microservice-params-template.json
      sed -i -e "s/TEMPLATE_PLACEHOLDER/$TEMPLATE_BUCKET\/codebuild/" cloudformation/stackset/microservice-params-template.json
      sed -i -e "s/ENVIRONMENT_STACK_SET_NAME_PLACEHOLDER/$ENVIRONMENT_STACK_SET_NAME/" cloudformation/stackset/microservice-params-template.json

      echo "PROD CONFIGS"
      cp cloudformation/stackset/microservice-params-template.json cloudformation/stackset/microservice-params-prod.json

      values=`cat cloudformation/config/prod/config.json`
      for s in $(echo $values | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
        export $s
      done
      sed -i -e "s/DATABASE_MASTER_USERNAME_PLACEHOLDER/$DATABASE_MASTER_USERNAME/" cloudformation/stackset/microservice-params-prod.json

      secret_string_escaped_json=$(aws secretsmanager get-secret-value --region eu-west-1 --secret-id WixitProd | jq '.SecretString')
      temp="${secret_string_escaped_json%\"}"
      secret_string_json="${temp#\"}"

      postgre_password_str=$(echo $secret_string_json | sed 's/\\//g' | jq .PostgreDbPassword)
      redis_password_str=$(echo $secret_string_json | sed 's/\\//g' | jq .RedisPassword)
      postgre_password_str_temp="${postgre_password_str%\"}"
      redis_password_str_temp="${redis_password_str%\"}"
      DATABASE_MASTER_PASSWORD="${postgre_password_str_temp#\"}"
      REDIS_PASSWORD="${redis_password_str_temp#\"}"

      sed -i -e "s/DATABASE_MASTER_PASSWORD_PLACEHOLDER/$DATABASE_MASTER_PASSWORD/" cloudformation/stackset/microservice-params-prod.json
      sed -i -e "s/REDIS_PASSWORD_PLACEHOLDER/$REDIS_PASSWORD/" cloudformation/environment-base-params-prod.json

      sed -i -e "s/ENVIRONMENT_PLACEHOLDER/PROD/" cloudformation/stackset/microservice-params-prod.json

    - |
      aws s3 cp "cloudformation/stackset/microservice.yaml" "s3://$TEMPLATE_BUCKET/codebuild/stackset/microservice.yaml"
      aws s3 cp "cloudformation/stackset/microservice-params-prod.json" "s3://$TEMPLATE_BUCKET/codebuild/stackset/microservice-params-prod.json"
artifacts:
  files:
  - cloudformation/stackset/microservice.yaml
  - cloudformation/stackset/microservice-params-prod.json